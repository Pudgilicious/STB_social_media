for(i in 1:nrow(processed_rdy)){
#print(i)
tryCatch({
folder = paste0(thumb_dir, to_be_pasted_path, "/", processed_rdy$DATE_TIME[i])
if(dir.exists(folder)){
folder_exists = paste0(folder, " exists. Can't copy content")
message(folder_exists)
write.table(data.frame(message = c(folder_exists), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
next   #skip current folder index
}else{
dir.create(folder)
}
copyDirectory(from = paste0(to_be_copied_path, "/", processed_rdy$DATE_TIME[i]),
to = folder,
recursive = T)
message(paste0("Add ",  processed_rdy$DATE_TIME[i], " folder"))
add_info = processed_rdy[i, ]
add_info = rename(add_info, IS_PASTED = IS_COPIED)
write.table(processed_rdy[i, ],
file = paste0(thumb_dir, is_pasted_files_csv_path),
append = T,
sep=',',
row.names=F,
col.names=F)
}, error = function(e){
msg_cant_copy = paste0("Error in copying folder: ", processed_rdy$DATE_TIME[i])
write.table(data.frame(message = c(msg_cant_copy), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
})
}
}else{
if( nrow(processed_rdy) == 0 ){
msg = "no data files to add"
}else{
msg = "to be combined dataset in is_pasted_files.csv doesnt have unique date_time"
}
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
}else{
msg = "is_copied_files.csv doesnt have unique date_time"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
#Copy and paste the file to thumbdrive too
#Copy the file
tryCatch({
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name)
)
}, error = function(e){
msg = "Thumbdrive is not inserted or is_copied_files.csv do not exist"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
)
message("copy function ran")
}
config = read_yaml("./config_file.yml")
is_copied_files_csv_path = "./tripadvisor/to_be_processed.csv"
is_pasted_files_csv_path = "./tripadvisor/is_copied_files.csv"
to_be_copied_path = "./tripadvisor/finalised_output"
to_be_pasted_path = "/tripadvisor/finalised_output"
log_path = "./tripadvisor/processed_copied_log_files"
media_review_name = "tripadvisor"
thumb_dir = config$General$thumb_dir             #"/media/jirong/Secure Key/stb_social_media"
copy_to_thumb(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name)
paste0(thumb_dir, "/", media_review_name)
is_pasted_files_csv_path
is_pasted_files_csv_path
#Note: Transfer from non WOG to thumbdrive
library(dplyr)
library(R.utils)
library(yaml)
########################################Tripadvisor#################################################
#For next version, include directories/ paths into arguments
copy_to_thumb = function(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name) {
#Check if thumbdrive exists. if not exit
if (!dir.exists(thumb_dir)){
message("thumbdrive is not inserted")
return("thumbdrive is not inserted")
}
#Read to_be_processed.csv
#to_be_copied = read.csv(paste0(thumb_dir, is_copied_files_csv_path), stringsAsFactors = F)
to_be_copied = read.csv(is_copied_files_csv_path, stringsAsFactors = F)
to_be_pasted = read.csv(is_pasted_files_csv_path, stringsAsFactors = F)
#Initialize log files
log = data.frame(message = c("init"), stringsAsFactors = F)
filename = paste0(log_path, "/", gsub(":", "_",Sys.time()), "_", media_review_name, ".csv")
write.csv(log, filename, row.names = F)
#Check if trip_processed has unique datetime
if (length(unique(to_be_copied$DATE_TIME)) == nrow(to_be_copied)){
#Determine which folders are not copied yet (check csv in git folder)
processed_rdy = to_be_copied %>%
dplyr::filter(IS_READY == 1)
processed_rdy = processed_rdy[which(!(processed_rdy$DATE_TIME %in% to_be_pasted$DATE_TIME)), ]
#If processed dataset and the processed csv is unique, proceed to add. If not flag out as error
names(processed_rdy)[which(names(processed_rdy) == "IS_READY")] = "IS_COPIED"
data_combined = rbind(processed_rdy, to_be_pasted)
if((nrow(data_combined) == length(unique(data_combined$DATE_TIME))) & nrow(processed_rdy) != 0){
#try-catch block
#Copy operations to hard disk
for(i in 1:nrow(processed_rdy)){
#print(i)
tryCatch({
folder = paste0(thumb_dir, to_be_pasted_path, "/", processed_rdy$DATE_TIME[i])
if(dir.exists(folder)){
folder_exists = paste0(folder, " exists. Can't copy content")
message(folder_exists)
write.table(data.frame(message = c(folder_exists), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
next   #skip current folder index
}else{
dir.create(folder)
}
copyDirectory(from = paste0(to_be_copied_path, "/", processed_rdy$DATE_TIME[i]),
to = folder,
recursive = T)
message(paste0("Add ",  processed_rdy$DATE_TIME[i], " folder"))
add_info = processed_rdy[i, ]
add_info = rename(add_info, IS_PASTED = IS_COPIED)
write.table(processed_rdy[i, ],
file = is_pasted_files_csv_path,
append = T,
sep=',',
row.names=F,
col.names=F)
}, error = function(e){
msg_cant_copy = paste0("Error in copying folder: ", processed_rdy$DATE_TIME[i])
write.table(data.frame(message = c(msg_cant_copy), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
})
}
}else{
if( nrow(processed_rdy) == 0 ){
msg = "no data files to add"
}else{
msg = "to be combined dataset in is_pasted_files.csv doesnt have unique date_time"
}
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
}else{
msg = "is_copied_files.csv doesnt have unique date_time"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
#Copy and paste the file to thumbdrive too
#Copy the file
tryCatch({
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name)
)
}, error = function(e){
msg = "Thumbdrive is not inserted or is_copied_files.csv do not exist"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
)
message("copy function ran")
}
#config parameter for personal directory
config = read_yaml("./config_file.yml")
is_copied_files_csv_path = "./tripadvisor/to_be_processed.csv"
is_pasted_files_csv_path = "./tripadvisor/is_copied_files.csv"
to_be_copied_path = "./tripadvisor/finalised_output"
to_be_pasted_path = "/tripadvisor/finalised_output"
log_path = "./tripadvisor/processed_copied_log_files"
media_review_name = "tripadvisor"
thumb_dir = config$General$thumb_dir             #"/media/jirong/Secure Key/stb_social_media"
copy_to_thumb(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name)
#Note: Transfer from non WOG to thumbdrive
library(dplyr)
library(R.utils)
library(yaml)
########################################Tripadvisor#################################################
#For next version, include directories/ paths into arguments
copy_to_thumb = function(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name) {
#Check if thumbdrive exists. if not exit
if (!dir.exists(thumb_dir)){
message("thumbdrive is not inserted")
return("thumbdrive is not inserted")
}
#Read to_be_processed.csv
#to_be_copied = read.csv(paste0(thumb_dir, is_copied_files_csv_path), stringsAsFactors = F)
to_be_copied = read.csv(is_copied_files_csv_path, stringsAsFactors = F)
to_be_pasted = read.csv(is_pasted_files_csv_path, stringsAsFactors = F)
#Initialize log files
log = data.frame(message = c("init"), stringsAsFactors = F)
filename = paste0(log_path, "/", gsub(":", "_",Sys.time()), "_", media_review_name, ".csv")
write.csv(log, filename, row.names = F)
#Check if trip_processed has unique datetime
if (length(unique(to_be_copied$DATE_TIME)) == nrow(to_be_copied)){
#Determine which folders are not copied yet (check csv in git folder)
processed_rdy = to_be_copied %>%
dplyr::filter(IS_READY == 1)
processed_rdy = processed_rdy[which(!(processed_rdy$DATE_TIME %in% to_be_pasted$DATE_TIME)), ]
#If processed dataset and the processed csv is unique, proceed to add. If not flag out as error
names(processed_rdy)[which(names(processed_rdy) == "IS_READY")] = "IS_COPIED"
data_combined = rbind(processed_rdy, to_be_pasted)
if((nrow(data_combined) == length(unique(data_combined$DATE_TIME))) & nrow(processed_rdy) != 0){
#try-catch block
#Copy operations to hard disk
for(i in 1:nrow(processed_rdy)){
#print(i)
tryCatch({
folder = paste0(thumb_dir, to_be_pasted_path, "/", processed_rdy$DATE_TIME[i])
if(dir.exists(folder)){
folder_exists = paste0(folder, " exists. Can't copy content")
message(folder_exists)
write.table(data.frame(message = c(folder_exists), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
next   #skip current folder index
}else{
dir.create(folder)
}
copyDirectory(from = paste0(to_be_copied_path, "/", processed_rdy$DATE_TIME[i]),
to = folder,
recursive = T)
message(paste0("Add ",  processed_rdy$DATE_TIME[i], " folder"))
add_info = processed_rdy[i, ]
add_info = rename(add_info, IS_PASTED = IS_COPIED)
write.table(processed_rdy[i, ],
file = is_pasted_files_csv_path,
append = T,
sep=',',
row.names=F,
col.names=F)
}, error = function(e){
msg_cant_copy = paste0("Error in copying folder: ", processed_rdy$DATE_TIME[i])
write.table(data.frame(message = c(msg_cant_copy), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
})
}
}else{
if( nrow(processed_rdy) == 0 ){
msg = "no data files to add"
}else{
msg = "to be combined dataset in is_pasted_files.csv doesnt have unique date_time"
}
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
}else{
msg = "is_copied_files.csv doesnt have unique date_time"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
#Copy and paste the file to thumbdrive too
#Copy the file
tryCatch({
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name)
)
}, error = function(e){
msg = "Thumbdrive is not inserted or is_copied_files.csv do not exist"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
)
message("copy function ran")
}
config = read_yaml("./config_file.yml")
is_copied_files_csv_path = "./tripadvisor/to_be_processed.csv"
is_pasted_files_csv_path = "./tripadvisor/is_copied_files.csv"
to_be_copied_path = "./tripadvisor/finalised_output"
to_be_pasted_path = "/tripadvisor/finalised_output"
log_path = "./tripadvisor/processed_copied_log_files"
media_review_name = "tripadvisor"
thumb_dir = config$General$thumb_dir             #"/media/jirong/Secure Key/stb_social_media"
copy_to_thumb(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name)
is_pasted_files_csv_path
paste0(thumb_dir, "/", media_review_name)
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name)
)
tryCatch({
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name)
)
}, error = function(e){
msg = "Thumbdrive is not inserted or is_copied_files.csv do not exist"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
)
is_pasted_files_csv_path
list.files("./tripadvisor")
paste0(thumb_dir, "/", media_review_name)
is_copied_files_csv_path = "./tripadvisor/is_copied/to_be_processed.csv"
paste0(thumb_dir, "/", media_review_name)
paste0(thumb_dir, "/", "is_copied/",media_review_name)
paste0(thumb_dir, "/", media_review_name, "/is_copied")
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name, "/is_copied")
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name, "/is_copied")
)
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name, "/is_copied")
)
str(file.copy)
help(file.copy)
paste0(thumb_dir, "/", media_review_name)
#Note: Transfer from non WOG to thumbdrive
library(dplyr)
library(R.utils)
library(yaml)
########################################Tripadvisor#################################################
#For next version, include directories/ paths into arguments
copy_to_thumb = function(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name) {
#Check if thumbdrive exists. if not exit
if (!dir.exists(thumb_dir)){
message("thumbdrive is not inserted")
return("thumbdrive is not inserted")
}
#Read to_be_processed.csv
#to_be_copied = read.csv(paste0(thumb_dir, is_copied_files_csv_path), stringsAsFactors = F)
to_be_copied = read.csv(is_copied_files_csv_path, stringsAsFactors = F)
to_be_pasted = read.csv(is_pasted_files_csv_path, stringsAsFactors = F)
#Initialize log files
log = data.frame(message = c("init"), stringsAsFactors = F)
filename = paste0(log_path, "/", gsub(":", "_",Sys.time()), "_", media_review_name, ".csv")
write.csv(log, filename, row.names = F)
#Check if trip_processed has unique datetime
if (length(unique(to_be_copied$DATE_TIME)) == nrow(to_be_copied)){
#Determine which folders are not copied yet (check csv in git folder)
processed_rdy = to_be_copied %>%
dplyr::filter(IS_READY == 1)
processed_rdy = processed_rdy[which(!(processed_rdy$DATE_TIME %in% to_be_pasted$DATE_TIME)), ]
#If processed dataset and the processed csv is unique, proceed to add. If not flag out as error
names(processed_rdy)[which(names(processed_rdy) == "IS_READY")] = "IS_COPIED"
data_combined = rbind(processed_rdy, to_be_pasted)
if((nrow(data_combined) == length(unique(data_combined$DATE_TIME))) & nrow(processed_rdy) != 0){
#try-catch block
#Copy operations to hard disk
for(i in 1:nrow(processed_rdy)){
#print(i)
tryCatch({
folder = paste0(thumb_dir, to_be_pasted_path, "/", processed_rdy$DATE_TIME[i])
if(dir.exists(folder)){
folder_exists = paste0(folder, " exists. Can't copy content")
message(folder_exists)
write.table(data.frame(message = c(folder_exists), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
next   #skip current folder index
}else{
dir.create(folder)
}
copyDirectory(from = paste0(to_be_copied_path, "/", processed_rdy$DATE_TIME[i]),
to = folder,
recursive = T)
message(paste0("Add ",  processed_rdy$DATE_TIME[i], " folder"))
add_info = processed_rdy[i, ]
add_info = rename(add_info, IS_PASTED = IS_COPIED)
write.table(processed_rdy[i, ],
file = is_pasted_files_csv_path,
append = T,
sep=',',
row.names=F,
col.names=F)
}, error = function(e){
msg_cant_copy = paste0("Error in copying folder: ", processed_rdy$DATE_TIME[i])
write.table(data.frame(message = c(msg_cant_copy), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
})
}
}else{
if( nrow(processed_rdy) == 0 ){
msg = "no data files to add"
}else{
msg = "to be combined dataset in is_pasted_files.csv doesnt have unique date_time"
}
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
}else{
msg = "is_copied_files.csv doesnt have unique date_time"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
#Copy and paste the file to thumbdrive too
#Copy the file
tryCatch({
file.copy(
from = is_pasted_files_csv_path,
to = paste0(thumb_dir, "/", media_review_name),
overwrite = T
)
}, error = function(e){
msg = "Thumbdrive is not inserted or is_copied_files.csv do not exist"
write.table(data.frame(message = c(msg), stringsAsFactors = F),
file=filename,
append = T,
sep=',',
row.names=F,
col.names=F)
message(msg)
}
)
message("copy function ran")
}
#config parameter for personal directory
config = read_yaml("./config_file.yml")
is_copied_files_csv_path = "./tripadvisor/to_be_processed.csv"
is_pasted_files_csv_path = "./tripadvisor/is_copied_files.csv"
to_be_copied_path = "./tripadvisor/finalised_output"
to_be_pasted_path = "/tripadvisor/finalised_output"
log_path = "./tripadvisor/processed_copied_log_files"
media_review_name = "tripadvisor"
thumb_dir = config$General$thumb_dir             #"/media/jirong/Secure Key/stb_social_media"
copy_to_thumb(thumb_dir, is_copied_files_csv_path, is_pasted_files_csv_path, to_be_copied_path, to_be_pasted_path, log_path, media_review_name)
